/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package connect_mpngodb;

import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.bson.types.ObjectId;
/**
 *
 * @author sachith
 */
public class CRUD_with_MongoDB extends javax.swing.JFrame {

    /**
     * Creates new form CRUD_with_MongoDB
     */
    
    MongoClient mongoClient = null;
    
    public CRUD_with_MongoDB() {
        initComponents();
        
        
        mongoClient = Connection.connect();
        table.getTableHeader().setReorderingAllowed(false);
        Tableload();
        clear();
        
        
    }
    
    public void Tableload(){
        
        try {
            //Connecting with database    
            DB db = mongoClient.getDB("mylib");
            System.out.println("Done.... Database Name is: "+db.getName());
            
        //Create Collection
            DBCollection coll = db.getCollection("employee");
            System.out.println("Collection created successfully");
            
            String[] columnNames = {"Id", "Name", "Age", "Designation" , "Location"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            
//Read All document data 
            Cursor cursor = coll.find();
            while(cursor.hasNext()){
                DBObject obj = cursor.next();
                String name = (String)obj.get("name");
                String age = (String)obj.get("age");
                String designation = (String)obj.get("designation");
                String Location = (String)obj.get("Location");
                
                ObjectId id = (ObjectId)obj.get("_id");
        model.addRow(new Object[] { id, name, age , designation , Location});
            }
            table.setModel(model);

    //cursor.close(); 
    //mongoClient.close();
            
        } catch (Exception e) {
        }
    }
    
    public void clear(){
        txt_age.setText(""); 
        txt_desc.setText("");
        txt_location.setText("");
        txt_name.setText("");
    }
    
   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        txt_location = new javax.swing.JTextField();
        txt_age = new javax.swing.JTextField();
        txt_desc = new javax.swing.JTextField();
        btn_update = new javax.swing.JButton();
        btn_save1 = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txt_find = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(753, 565));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Name:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, -1, -1));

        jLabel2.setText("Age:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        jLabel3.setText("Designation:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, -1, -1));

        jLabel4.setText("Location:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, -1));
        getContentPane().add(txt_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 96, -1));
        getContentPane().add(txt_location, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 220, 96, -1));
        getContentPane().add(txt_age, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 96, -1));
        getContentPane().add(txt_desc, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 96, -1));

        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 210, -1, -1));

        btn_save1.setText("Save");
        btn_save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_save1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_save1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, -1, -1));

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 210, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 651, 180));

        txt_find.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_findKeyReleased(evt);
            }
        });
        getContentPane().add(txt_find, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 159, -1));

        jLabel5.setText("Serach:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, -1, -1));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setText("Basic CRUD Operations by using MongoDB");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 27, 387, -1));

        jLabel7.setText("Created by sachith94-lion");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 520, 160, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_save1ActionPerformed
        

        try {
            
            //Connecting with database    
            DB db = mongoClient.getDB("mylib");
            System.out.println("Done.... Database Name is: "+db.getName());
            
        //Create Collection
            DBCollection coll = db.getCollection("employee");
            System.out.println("Collection created successfully");
            
        BasicDBObject doc1 = new BasicDBObject("name",txt_name.getText()).
            append("age",txt_age.getText()). 
                    append("designation",txt_desc.getText()).
                    append("Location",txt_location.getText());
            coll.insert(doc1);
            System.out.println("Document Inserted.....");
            JOptionPane.showMessageDialog(null,"Document Inserted.....");
            
            
            Tableload();
            clear();
            
        } catch (Exception e) {
        }


            
    }//GEN-LAST:event_btn_save1ActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        
//Connecting with database    
            DB db = mongoClient.getDB("mylib");
            System.out.println("Done.... Database Name is: "+db.getName());
        
//Create Collection
            DBCollection coll = db.getCollection("employee");
            System.out.println("Collection created successfully");
        
            BasicDBObject updateDoc = new BasicDBObject();
            //New Value
            updateDoc.append("$set", new BasicDBObject().append("Location", txt_location.getText()).
                    append("age", txt_age.getText()).
                    append("designation", txt_desc.getText()));
            //old Document
            BasicDBObject oldDoc = new BasicDBObject().append("name", txt_name.getText());
            coll.update(oldDoc, updateDoc,false,false);
            System.out.println("Document Updated..");
            JOptionPane.showMessageDialog(null,"Document Updated..");
            
            Tableload();
            clear();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
       
        //Connecting with database    
            DB db = mongoClient.getDB("mylib");
            System.out.println("Done.... Database Name is: "+db.getName());
        
        //Create Collection
            DBCollection coll = db.getCollection("employee");
            System.out.println("Collection created successfully");
            
        
            BasicDBObject del = new BasicDBObject("name",txt_name.getText());
            coll.remove(del);
            
            JOptionPane.showMessageDialog(null,"Document Deleted..");
            Tableload();
            clear();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
        int r = table.getSelectedRow();
        
        String name = table.getValueAt(r, 1).toString();
        String age = table.getValueAt(r, 2).toString();
        String designation = table.getValueAt(r, 3).toString();
        String Location = table.getValueAt(r, 4).toString();
        
        
        
        txt_name.setText(name);
        txt_age.setText(age); 
        txt_desc.setText(designation);
        txt_location.setText(Location);
        
    }//GEN-LAST:event_tableMouseClicked

    private void txt_findKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_findKeyReleased
        if(txt_find.getText().equals("")){
            Tableload();
        }
        
        else{
            String Find_name= txt_find.getText();
        
        try {
            
        //Read one document data
        
        //Connecting with database    
            DB db = mongoClient.getDB("mylib");
            System.out.println("Done.... Database Name is: "+db.getName());
        
        //Create Collection
            DBCollection coll = db.getCollection("employee");
            System.out.println("Collection created successfully");

            BasicDBObject doc = new BasicDBObject("name",Find_name);
            Cursor cursor = coll.find(doc);
            
            String[] columnNames = {"Id", "Name", "Age", "Designation" , "Location"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            
            while(cursor.hasNext()){
                //System.out.println(cursor.next());
                //System.out.println(cursor.next().get("name"));
                
                DBObject obj = cursor.next();
                String name = (String)obj.get("name");
                String age = (String)obj.get("age");
                String designation = (String)obj.get("designation");
                String Location = (String)obj.get("Location");
                ObjectId id = (ObjectId)obj.get("_id");
                model.addRow(new Object[] { id, name, age , designation , Location});
            }
            table.setModel(model);
          
            
        } catch (Exception e) {
        }
        }
        
    }//GEN-LAST:event_txt_findKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CRUD_with_MongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CRUD_with_MongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CRUD_with_MongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CRUD_with_MongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRUD_with_MongoDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_save1;
    private javax.swing.JButton btn_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField txt_age;
    private javax.swing.JTextField txt_desc;
    private javax.swing.JTextField txt_find;
    private javax.swing.JTextField txt_location;
    private javax.swing.JTextField txt_name;
    // End of variables declaration//GEN-END:variables
}
